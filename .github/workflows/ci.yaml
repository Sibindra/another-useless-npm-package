name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types: [ published ]

env:
  NODE_VERSION: "20"
  NPM_CACHE: "npm"
  DIST_PATH: "dist/"
  GH_PAT: ${{ secrets.GH_PAT }}
  NPM_PAT: ${{ secrets.NPM_PAT }}

jobs:
  setup:
    name: Setup Node.js and Dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: ${{ env.NPM_CACHE }}

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies and run tests
        run: |
          npm ci
          npm test

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js (Reused Step)
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: ${{ env.NPM_CACHE }}
      - name: Install dependencies and build
        run: |
          npm ci
          npm run build
      - uses: actions/upload-artifact@v4
        with:
          name: build
          path: ${{ env.DIST_PATH }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Fetch remote tags
        run: git fetch --tags
      - name: Get latest remote tag
        id: latest-tag
        run: |
          # Attempt to get the latest remote tag
          latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1) || echo "no-tags-found")
          echo "Latest remote tag: $latest_tag"
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV

      - name: Create v1.0.0 tag if no tags exist
        run: |
          if [ "${{ env.latest_tag }}" == "no-tags-found" ]; then
            echo "No tags found, creating v1.0.0"
            git tag v1.0.0
            git push origin v1.0.0
            echo "new_version=v1.0.0" >> $GITHUB_ENV
          else
            echo "Using existing tag: ${{ env.latest_tag }}"
            echo "new_version=${{ env.latest_tag }}" >> $GITHUB_ENV
          fi

      - name: Push changes
        run: |
          git pull --rebase origin main
          git push origin main --tags
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.new_version }}
          generated_notes: true
      - name: Delete Local Tags
        run: |
          git tag -d ${{ env.new_version }}

  publish:
    name: Publish to npm and GitHub Packages
    runs-on: ubuntu-latest
    needs: release
    steps:
      - uses: actions/checkout@v4
      - name: Set up NPM for publishing
        run: |
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.GH_PAT }}" >> .npmrc
          npm config set //registry.npmjs.org/:_authToken="${{ secrets.NPM_PAT }}"
      - name: Publish to npm
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_PAT }}
      - name: Publish to GitHub Packages
        run: |
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.GH_PAT }}" >> .npmrc
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GH_PAT }}
